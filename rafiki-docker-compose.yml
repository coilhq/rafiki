version: '3'
services:
  auth:
    image: ghcr.io/interledger/rafiki-auth:latest
    restart: always
    networks:
      rafiki:
    ports:
      - "3006:3006"
    environment:
      NODE_ENV: development
      AUTH_DATABASE_URL: postgresql://auth:auth@database/auth
  backend:
    image: ghcr.io/interledger/rafiki-backend:latest
    restart: always
    privileged: true
    ports:
      - "3001:3001"
      - "3002:3002"
    networks:
      rafiki:
    environment:
      NODE_ENV: development
      LOG_LEVEL: debug
      PORT: 3001
      CONNECTOR_PORT: 3002
      DATABASE_URL: postgresql://backend:backend@database/backend
      REDIS_URL: redis://redis:6379
      TIGERBEETLE_CLUSTER_ID: 0
      # Tigerbeetle will support DNS in future
      TIGERBEETLE_REPLICA_ADDRESSES: '["10.5.0.50:4342"]'
      NONCE_REDIS_KEY: test
      AUTH_SERVER_GRANT_URL: http://rafiki-auth
      AUTH_SERVER_INTROSPECTION_URL: http://auth:3006/introspect
      ILP_ADDRESS: test.rafiki
      STREAM_SECRET: BjPXtnd00G2mRQwP/8ZpwyZASOch5sUXT5o0iR5b5wU=
      ADMIN_KEY: admin
      PUBLIC_HOST: rafiki.test
      WEBHOOK_URL: https://end3sf6r22xva.x.pipedream.net
      OPEN_PAYMENTS_SPEC: https://raw.githubusercontent.com/interledger/open-payments/main/open-api-spec.yaml
      AUTH_SERVER_SPEC: https://raw.githubusercontent.com/interledger/open-payments/main/auth-server-open-api-spec.yaml
      PRICES_URL: http://rates:3005/prices
    depends_on:
      - tigerbeetle
  rates:
    image: ghcr.io/interledger/rafiki-rates:latest
    restart: always
    ports:
      - "3005:3005"
    networks:
      rafiki:
    environment:
      NODE_ENV: development
      PORT: 3005
  database:
    image: "postgres" # use latest official postgres version
    restart: unless-stopped
    networks:
      rafiki:
    volumes:
      - database-data:/var/lib/postgresql/data/ # persist data even if container shuts down
      - ./dbinit.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: postgres
  tigerbeetle:
    image: ghcr.io/coilhq/tigerbeetle@sha256:56e24aa5d64e66e95fc8b42c8cfe740f2b2b4045804c828e60af4dea8557fbc7 
    restart: unless-stopped
    privileged: true
    volumes:
      - tigerbeetle-data:/var/lib/tigerbeetle
    networks:
      rafiki:
        ipv4_address: 10.5.0.50
    ports:
      - "4342:4342"
    entrypoint:
      - /bin/sh
      - -c
      - | 
        set -ex
        DATA_FILE=/var/lib/tigerbeetle/cluster_0000000000_replica_000.tigerbeetle
        set +e
        ls $$DATA_FILE
        DATA_FILE_EXISTS="$$?"
        set -e
        echo $$DATA_FILE_EXISTS
        if [ "$$DATA_FILE_EXISTS" != 0 ]; then 
          /opt/beta-beetle/tigerbeetle init --cluster=0 --replica=0 --directory=/var/lib/tigerbeetle; 
        fi
        hostname -I
        ls /var/lib/tigerbeetle
        DATA_FILE=/var/lib/tigerbeetle/cluster_0000000000_replica_000.tigerbeetle
        /opt/beta-beetle/tigerbeetle start --cluster="0" --replica="0" --directory=/var/lib/tigerbeetle --addresses=0.0.0.0:4342
  redis:
    image: "redis:5" # use latest official postgres version
    restart: unless-stopped
    networks:
      rafiki:
    ports:
      - "6379:6379"
volumes:
  database-data: # named volumes can be managed easier using docker-compose
  tigerbeetle-data: # named volumes can be managed easier using docker-compose

networks:
  rafiki:
    driver: bridge
    ipam:
     config:
       - subnet: 10.5.0.0/16
         gateway: 10.5.0.1
