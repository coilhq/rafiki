meta {
  name: Create Incoming Payment
  type: http
  seq: 4
}

post {
  url: {{receiverOpenPaymentsHost}}/incoming-payments
  body: json
  auth: none
}

headers {
  Authorization: GNAP {{accessToken}}
}

body:json {
  {
      "walletAddress": "{{receiverWalletAddress}}",
      "expiresAt": "{{tomorrow}}",
      "metadata": {
          "description": "Free Money!"
      }
  }
}

script:pre-request {
  const scripts = require('./scripts');
  
  bru.setEnvVar("tomorrow", (new Date(new Date().setDate(new Date().getDate() + 1))).toISOString());
  
  scripts.addHostHeader();
  
  await scripts.addSignatureHeaders();
}

script:post-response {
  const body = res.getBody();
  bru.setEnvVar("incomingPaymentId", body.id.split("/").pop());
  bru.setEnvVar("incomingPaymentUrl", body.id);
  
  bru.setEnvVar("debitAmount", JSON.stringify({
      "value": "500",
      "assetCode": "USD",
      "assetScale": 2
    }))
  
  bru.setEnvVar("receiveAmount", JSON.stringify({
      "value": "500",
      "assetCode": "USD",
      "assetScale": 2
    }))
}

tests {
  test("Status code is 201", function() {
    expect(res.getStatus()).to.equal(201);
  });
}
