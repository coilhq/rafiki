meta {
  name: Create Peer
  type: graphql
  seq: 9
}

post {
  url: {{RafikiGraphqlHost}}/graphql
  body: graphql
  auth: none
}

body:graphql {
  mutation CreatePeer ($input: CreatePeerInput!) {
      createPeer (input: $input) {
          peer {
              id
              name
              liquidity
              liquidityThresholdLow
              liquidityThresholdHigh
              asset{
                  id
                  scale
                  code
                  withdrawalThreshold
              }
          }
      }
  }
}

body:graphql:vars {
  {
    "input": {
      "name": "Wallet1",
      "staticIlpAddress": "test.peer",
      "http": {
        "incoming": {"authTokens": ["test123abc"]},
        "outgoing": {"endpoint": "http://peer-backend:3002", "authToken": "test123abc"}
      },
      "assetId": "{{assetId}}",
      "maxPacketAmount": 1000,
      "liquidityThresholdLow": 100000000,
      "liquidityThresholdHigh": "100000000",
      "initialLiquidity": 200000000
    }
  }
}

script:pre-request {
  const scripts = require('./scripts');
  
  scripts.addApiSignatureHeader();
}

script:post-response {
  const body = res.getBody();
  
  if (body?.data) {
    bru.setEnvVar("peerId", body.data.createPeer.peer.id);
  }
}
