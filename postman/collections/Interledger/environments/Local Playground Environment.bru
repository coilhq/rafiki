vars {
  host3000: cloud-nine-wallet-backend
  host4000: happy-life-bank-backend
  clientWalletAddress: http://localhost:4000/accounts/pfry
  clientKeyId: keyid-97a3a431-8ee1-48fc-ac85-70e2f5eba8e5
  senderWalletAddress: http://localhost:3000/accounts/gfranklin
  receiverWalletAddress: http://localhost:4000/accounts/asmith
  RafikiGraphqlHost: http://localhost:3001
  RafikiAuthGraphqlHost: http://localhost:3003
  PeerGraphqlHost: http://localhost:4001
  PeerAuthGraphqlHost: http://localhost:4003
  preRequestHost: const url = require('url')

const requestUrl = url.parse(request.url
  .replace(/{{([A-Za-z]\w+)}}/g, (_, key) => pm.environment.get(key)))

if(requestUrl.hostname === 'localhost'){
    const hostHeader = requestUrl.port === '3000'
        ? pm.environment.get('host3000')
        : pm.environment.get('host4000')
    pm.request.headers.add({ 
        key: 'Host', 
        value: hostHeader
    })
    request.headers['host'] = hostHeader
}
  preRequestSignatures: let requestUrl = request.url
  .replace(/{{([A-Za-z]\w+)}}/g, (_, key) => pm.environment.get(key))
  .replace(/localhost:([3,4])000/g, (_, key) =>
    key === '3'
      ? pm.environment.get('host3000')
      : pm.environment.get('host4000')
  )

const requestBody =
  request.method === 'POST' && Object.keys(request.data).length !== 0
    ? request.data
        .replace(/{{([A-Za-z]\w+)}}/g, (_, key) => pm.environment.get(key))
        .replace(/http:\/\/localhost:([3,4])000/g, (_, key) =>
          key === '3'
            ? 'https://' + pm.environment.get('host3000')
            : 'https://' + pm.environment.get('host4000')
        )
    : undefined
pm.request.body.raw = requestBody

const requestHeaders = JSON.parse(
  JSON.stringify(request.headers).replace(/{{([A-Za-z]\w+)}}/g, (_, key) =>
    pm.environment.get(key)
  )
)

// Request Signature Headers
pm.sendRequest(
  {
    url: pm.environment.get('signatureUrl'),
    method: 'POST',
    header: {
      'content-type': 'application/json'
    },
    body: {
      mode: 'raw',
      raw: JSON.stringify({
        keyId: pm.environment.get('clientKeyId'),
        base64Key: pm.environment.get('clientPrivateKey'),
        request: {
          url: requestUrl,
          method: request.method,
          headers: requestHeaders,
          body: requestBody
        }
      })
    }
  },
  (_, res) => {
    const headers = res.json()
    for (let [key, value] of Object.entries(headers)) {
      pm.request.headers.add({ key, value })
    }
  }
)

  signatureUrl: https://kxu5d4mr4blcthphxomjlc4xk40rvdsx.lambda-url.eu-central-1.on.aws/
  accessToken: 
  continueToken: 
  continueId: 
  tomorrow: 
  incomingPaymentId: 
  quoteId: 
  quoteDebitAmountValue: 
  quoteReceiveAmountValue: 
  outgoingPaymentId: 
  receiverId: 
  senderOpenPaymentsHost: 
  senderAssetCode: 
  senderAssetScale: 
  senderOpenPaymentsAuthHost: 
  receiverOpenPaymentsHost: 
  receiverAssetCode: 
  receiverAssetScale: 
  receiverOpenPaymentsAuthHost: 
  quoteDebitAmount: 
  quoteReceiveAmount: 
  gfranklinWalletAddressId: 
  receiverHost: http://localhost:4000
  senderHost: http://localhost:3000
  assetId: 
  peerId: 
  walletAddressId: 
  walletAddressUrl: 
  createWalletAddressRequest: 
  walletAddressKeyId: 
  uniqueWalletAddress: 
  secondWalletAddressId: 
  tokenId: 
}
vars:secret [
  clientPrivateKey
]
