{
	"info": {
		"_postman_id": "92761441-6d0c-4fc6-aa04-73eccf6afd4c",
		"name": "Interledger",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23674746",
		"_collection_link": "https://www.postman.com/interledger/workspace/interledger/collection/22855701-92761441-6d0c-4fc6-aa04-73eccf6afd4c?action=share&creator=23674746&source=collection_link"
	},
	"item": [
		{
			"name": "Rafiki Admin APIs",
			"item": [
				{
					"name": "Create Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"assetId\", body.data.createAsset.asset.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateAsset($input: CreateAssetInput!) {\n  createAsset(input: $input) {\n    asset {\n      code\n      createdAt\n      id\n      scale\n      withdrawalThreshold\n    }\n    code\n    message\n    success\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"code\": \"USD\",\n    \"scale\": 6,\n    \"withdrawalThreshold\": null\n  }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Asset Withdrawal Threshold",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation UpdateAssetWithdrawalThreshold($input: UpdateAssetInput!) {\n  updateAssetWithdrawalThreshold(input: $input) {\n    asset {\n      code\n      createdAt\n      id\n      scale\n      withdrawalThreshold\n    }\n    code\n    message\n    success\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"id\": \"{{assetId}}\",\n    \"withdrawalThreshold\": 100\n  }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Asset",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetAsset($id: String!) {\n    asset(id: $id) {\n    code\n    createdAt\n    id\n    scale\n    withdrawalThreshold\n  }\n}",
								"variables": "{\n    \"id\": \"{{assetId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Assets",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetAssets($after: String, $before: String, $first: Int, $last: Int) {\n    assets(after: $after, before: $before, first:$first, last: $last) {\n        edges {\n            cursor\n            node {\n                code\n                createdAt\n                id\n                scale\n                withdrawalThreshold\n                liquidity\n            }\n        }\n        pageInfo {\n            endCursor\n            hasNextPage\n            hasPreviousPage\n            startCursor\n        }\n    }\n}",
								"variables": "{\n  \"after\": null,\n  \"before\": null,\n  \"first\": null,\n  \"last\": null\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Asset Liquidity",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation AddAssetLiquidity ($input: AddAssetLiquidityInput!) {\n  addAssetLiquidity(input: $input) {\n    code\n    success\n    message\n    error\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"id\": \"3615a385-4c7e-43ec-9d66-f5d2e421108a\",\n    \"assetId\": \"{{assetId}}\",\n    \"amount\": \"1000000\",\n    \"idempotencyKey\":\"{{$guid}}\"\n  }\n}\n"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Withdraw Asset Liquidity",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateAssetLiquidityWithdrawal ($input: CreateAssetLiquidityWithdrawalInput!) {\n  createAssetLiquidityWithdrawal(input: $input) {\n    code\n    success\n    message\n    error\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"id\": \"b97fd85a-126e-42ef-b40d-1a50a70ffa6f\",\n    \"assetId\": \"{{assetId}}\",\n    \"amount\": \"100\",\n    \"idempotencyKey\":\"{{$guid}}\"\n  }\n}\n"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Peer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"peerId\", body.data.createPeer.peer.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreatePeer ($input: CreatePeerInput!) {\n    createPeer (input: $input) {\n        code\n        message\n        success\n        peer {\n            id\n            name\n            asset{\n                id\n                scale\n                code\n                withdrawalThreshold\n            }\n        }\n    }\n}",
								"variables": "{\n  \"input\": {\n    \"name\": \"Wallet1\",\n    \"staticIlpAddress\": \"test.peer\",\n    \"http\": {\n      \"incoming\": {\"authTokens\": [\"test123abc\"]},\n      \"outgoing\": {\"endpoint\": \"http://peer-backend:3002\", \"authToken\": \"test123abc\"}\n    },\n    \"assetId\": \"{{assetId}}\",\n    \"maxPacketAmount\": 1000\n  }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Peer",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation UpdatePeer ($input: UpdatePeerInput!){  \n  updatePeer(input: $input) {\n    code\n    success\n    message\n    peer {\n      id\n      name\n      http {\n        outgoing {\n          authToken\n          endpoint\n        }\n      }\n    }\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"id\": \"{{peerId}}\",\n    \"name\": \"Wall-y\",\n    \"http\": {\n      \"incoming\": {\"authTokens\": [\"test-123\"]},\n      \"outgoing\": {\"endpoint\": \"http://peer-backend:3002\", \"authToken\": \"test\"}\n    },\n    \"maxPacketAmount\": 1000\n  }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Peer",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetPeer {\n  peer (id: \"{{peerId}}\") {\n    id\n    name\n    http {\n      outgoing {\n        authToken\n        endpoint\n      }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Peers",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetPeers {\n    peers {\n        edges {\n            cursor\n            node {\n                id\n                name\n                asset {\n                    code\n                    scale\n                }\n                liquidity\n                staticIlpAddress\n                http {\n                    outgoing {\n                        authToken\n                        endpoint\n                    }\n                }\n            }\n        }\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Peer",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation DeletePeer($input: DeletePeerInput!) {\n  deletePeer(input: $input) {\n    code\n    message\n    success\n  }\n}\n",
								"variables": "{\n    \"input\": {\n        \"id\": \"{{peerId}}\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Peer Liquidity",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation AddPeerLiquidity ($input: AddPeerLiquidityInput!) {\n  addPeerLiquidity(input: $input) {\n    code\n    success\n    message\n    error\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"id\": \"a09b730d-8610-4fda-98fa-ec7acb19c775\",\n    \"peerId\": \"{{peerId}}\",\n    \"amount\": \"1000000\",\n    \"idempotencyKey\":\"{{$guid}}\"\n  }\n}\n"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Withdraw Peer Liquidity",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreatePeerLiquidityWithdrawal ($input: CreatePeerLiquidityWithdrawalInput!) {\n  createPeerLiquidityWithdrawal(input: $input) {\n    code\n    success\n    message\n    error\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"id\": \"421fae87-9a59-4217-9ff8-faf55ffab9c6\",\n    \"peerId\": \"{{peerId}}\",\n    \"amount\": \"100\"\n  }\n}\n"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Liquidity Withdrawal",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation PostLiquidityWithdrawal($input: PostLiquidityWithdrawalInput!) {\n  postLiquidityWithdrawal(input: $input) {\n    code\n    error\n    message\n    success\n  }\n}",
								"variables": "{\n    \"input\": {\n        \"withdrawalId\": \"421fae87-9a59-4217-9ff8-faf55ffab9c6\",\n        \"idempotencyKey\":\"{{$guid}}\"\n    }\n}\n"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Void Liquidity Withdrawal",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation VoidLiquidityWithdrawal($input: VoidLiquidityWithdrawalInput!) {\n  voidLiquidityWithdrawal(input: $input) {\n    code\n    error\n    message\n    success\n  }\n}",
								"variables": "{\n    \"input\": {\n        \"withdrawalId\": \"421fae87-9a59-4217-9ff8-faf55ffab9c6\",\n        \"idempotencyKey\":\"{{$guid}}\"\n    }\n}\n"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Payment Pointer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"paymentPointerId\", body.data.createPaymentPointer.paymentPointer.id);",
									"pm.expect(pm.collectionVariables.get(\"paymentPointerId\")).to.be.a('string');",
									"",
									"pm.collectionVariables.set(\"paymentPointerUrl\", body.data.createPaymentPointer.paymentPointer.url);",
									"pm.expect(pm.collectionVariables.get(\"paymentPointerUrl\")).to.be.a('string');",
									"",
									"pm.collectionVariables.set(\"createPaymentPointerRequest\", pm.request);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreatePaymentPointer($input: CreatePaymentPointerInput!) {\n  createPaymentPointer(input: $input) {\n    code\n    success\n    message\n    paymentPointer {\n      id\n      createdAt\n      publicName\n      url\n      status\n      asset {\n        code\n        createdAt\n        id\n        scale\n        withdrawalThreshold\n      }\n    }\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"assetId\": \"{{assetId}}\",\n    \"url\": \"https://{{OpenPaymentsHost}}/timon/{{$randomInt}}\",\n    \"publicName\": \"Timon\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Payment Pointer",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation UpdatePaymentPointer($input: UpdatePaymentPointerInput!) {\n    updatePaymentPointer(input: $input) {\n        code\n        message\n        paymentPointer {\n            id\n            asset {\n                id\n                code\n                scale\n                withdrawalThreshold\n                createdAt\n            }\n            url\n            publicName\n            createdAt\n            status\n        }\n        success\n    }\n}",
								"variables": "{\n  \"input\": {\n    \"id\": \"{{paymentPointerId}}\",\n    \"publicName\": \"New Name\",\n    \"status\": \"ACTIVE\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Payment Pointer",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetPaymentPointer($id: String!) {\n    paymentPointer(id: $id) {\n        id\n        asset {\n            id\n            code\n            scale\n            withdrawalThreshold\n            createdAt\n        }\n        createdAt\n        incomingPayments {\n            edges {\n                node {\n                    id\n                    state\n                    incomingAmount {\n                        value\n                    }\n                    receivedAmount {\n                        value\n                    }\n                }\n                cursor\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n                hasPreviousPage\n                startCursor\n            }\n        }\n        status\n    }\n}",
								"variables": "{\n    \"id\": \"{{paymentPointerId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Payment Pointers",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetPaymentPointers {\n    paymentPointers {\n        edges {\n            cursor\n            node {\n                id\n                publicName\n                url\n            }\n        }\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Payment Pointer Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"paymentPointerKeyId\", body.data.createPaymentPointerKey.paymentPointerKey.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreatePaymentPointerKey ($input: CreatePaymentPointerKeyInput!) {\n    createPaymentPointerKey(input: $input) {\n        code\n        message\n        success\n        paymentPointerKey {\n            id\n            revoked\n            paymentPointerId\n            createdAt\n            jwk {\n                alg\n                crv\n                kid\n                kty\n                x\n            }\n        }\n    }\n}",
								"variables": "{\n    \"input\": {\n        \"paymentPointerId\": \"{{paymentPointerId}}\",\n        \"jwk\": {\n            \"alg\": \"EdDSA\",\n            \"crv\": \"Ed25519\",\n            \"kid\": \"kid_dad93e7f-f40b-484d-99d2-df12c8523176\",\n            \"kty\": \"OKP\", \n            \"x\": \"ubqoInifJ5sssIPPnQR1gVPfmoZnJtPhTkyMXNoJF_8\"\n        }\n    }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revoke Payment Pointer Key",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation RevokePaymentPointerKey ($input: RevokePaymentPointerKeyInput!) {\n    revokePaymentPointerKey (input: $input) {\n        code\n        message\n        success\n        paymentPointerKey {\n            id\n            revoked\n            paymentPointerId\n            createdAt\n        }\n    }\n}",
								"variables": "{\n    \"input\": {\n        \"id\": \"{{paymentPointerKeyId}}\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Incoming Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"incomingPaymentId\", body.data.createIncomingPayment.payment.id);",
									"pm.expect(pm.collectionVariables.get(\"incomingPaymentId\")).to.be.a('string');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateIncomingPayment ($input: CreateIncomingPaymentInput!) {\n    createIncomingPayment(input: $input) {\n    code\n    message\n    payment {\n      createdAt\n      expiresAt\n      metadata\n      id\n      incomingAmount {\n        assetCode\n        assetScale\n        value\n      }\n      paymentPointerId\n      receivedAmount {\n        assetCode\n        assetScale\n        value\n      }\n      state\n    }\n    success\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"expiresAt\": null,\n    \"metadata\": {\n        \"externalRef\": null, \n        \"description\": \"Hello World\"\n    },\n    \"incomingAmount\": null,\n    \"paymentPointerId\": \"{{paymentPointerId}}\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Receiver (remote Incoming Payment)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateReceiver($input: CreateReceiverInput!) {\n  createReceiver(input: $input) {\n    code\n    message\n    receiver {\n      completed\n      createdAt\n      expiresAt\n      metadata\n      id\n      incomingAmount {\n        assetCode\n        assetScale\n        value\n      }\n      paymentPointerUrl\n      receivedAmount {\n        assetCode\n        assetScale\n        value\n      }\n      updatedAt\n    }\n    success\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"expiresAt\": null,\n    \"metadata\": {\n        \"description\": \"Hello my friend\",\n        \"externalRef\": null\n    },\n    \"incomingAmount\": {\n      \"assetCode\": \"USD\",\n      \"assetScale\": 2,\n      \"value\": 100\n    },\n    \"paymentPointerUrl\": \"http://peer-backend/accounts/pfry\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Quote",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"quoteId\", body.data.createQuote.quote.id);",
									"pm.expect(pm.collectionVariables.get(\"quoteId\")).to.be.a('string');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create an additional payment pointer to represent the account that will be sending money",
									"",
									"// Reset the uniquePaymentPointer value",
									"pm.collectionVariables.set(\"uniquePaymentPointer\", Math.floor(Math.random() * (1001)));",
									"",
									"const initialRequest = pm.collectionVariables.get(\"createPaymentPointerRequest\");",
									"",
									"const postRequest = {",
									"  url: initialRequest.url,",
									"  method: initialRequest.method,",
									"  body: {",
									"    mode: 'graphql',",
									"    graphql: {",
									"        query: initialRequest.body.graphql.query,",
									"        variables: JSON.stringify({",
									"            \"input\": {",
									"                \"assetId\": pm.collectionVariables.get(\"assetId\"),",
									"                \"url\": \"https://\" + pm.collectionVariables.get(\"OpenPaymentsHost\") + \"/simon/\" + pm.collectionVariables.get(\"uniquePaymentPointer\"),",
									"                \"publicName\": \"Simon\"",
									"            }",
									"        })",
									"    }",
									"  }",
									"};",
									"",
									"pm.sendRequest(postRequest, (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    const body = response.json();",
									"    pm.test('response should be okay to process', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.expect(body.data.createPaymentPointer.code).to.equal('200');",
									"        pm.expect(body.data.createPaymentPointer.success).to.equal(true);",
									"    });",
									"    pm.collectionVariables.set(\"secondPaymentPointerId\", body.data.createPaymentPointer.paymentPointer.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateQuote($input: CreateQuoteInput!) {\n  createQuote(input: $input) {\n    code\n    message\n    quote {\n      createdAt\n      expiresAt\n      highEstimatedExchangeRate\n      id\n      lowEstimatedExchangeRate\n      maxPacketAmount\n      minExchangeRate\n      paymentPointerId\n      receiveAmount {\n        assetCode\n        assetScale\n        value\n      }\n      receiver\n      sendAmount {\n        assetCode\n        assetScale\n        value\n      }\n    }\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"paymentPointerId\": \"{{secondPaymentPointerId}}\",\n    \"receiveAmount\": null,\n    \"receiver\": \"{{paymentPointerUrl}}/incoming-payments/{{incomingPaymentId}}\",\n    \"sendAmount\": {\n      \"assetCode\": \"USD\",\n      \"assetScale\": 4,\n      \"value\": 50000\n    }\n  }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Quote",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetQuote($id: String!) {\n    quote(id: $id) {\n        createdAt\n        highEstimatedExchangeRate\n        expiresAt\n        id\n        lowEstimatedExchangeRate\n        maxPacketAmount\n        minExchangeRate\n        paymentPointerId\n        receiveAmount {\n            assetCode\n            assetScale\n            value\n        }\n        receiver\n        sendAmount {\n            assetCode\n            assetScale\n            value\n        }\n    }\n}",
								"variables": "{\n    \"id\": \"{{quoteId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Outgoing Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"outgoingPaymentId\", body.data.createOutgoingPayment.payment.id);",
									"pm.expect(pm.collectionVariables.get(\"outgoingPaymentId\")).to.be.a('string');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateOutgoingPayment($input: CreateOutgoingPaymentInput!) {\n  createOutgoingPayment(input: $input) {\n    code\n    message\n    payment {\n      createdAt\n      error\n      metadata\n      id\n      paymentPointerId\n      quote {\n        createdAt\n        expiresAt\n        highEstimatedExchangeRate\n        id\n        lowEstimatedExchangeRate\n        maxPacketAmount\n        minExchangeRate\n        paymentPointerId\n        receiveAmount {\n          assetCode\n          assetScale\n          value\n        }\n        receiver\n        sendAmount {\n          assetCode\n          assetScale\n          value\n        }\n      }\n      receiveAmount {\n        assetCode\n        assetScale\n        value\n      }\n      receiver\n      sendAmount {\n        assetCode\n        assetScale\n        value\n      }\n      sentAmount {\n        assetCode\n        assetScale\n        value\n      }\n      state\n      stateAttempts\n    }\n    success\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"metadata\": {\n        \"description\": null,\n        \"externalRef\": null\n    },\n    \"paymentPointerId\": \"{{secondPaymentPointerId}}\",\n    \"quoteId\": \"{{quoteId}}\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Outgoing Payment",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetOutgoingPayment($id: String!) {\noutgoingPayment(id: $id) {\n    createdAt\n    error\n    metadata\n    id\n    paymentPointerId\n    quote {\n      createdAt\n      expiresAt\n      highEstimatedExchangeRate\n      id\n      lowEstimatedExchangeRate\n      maxPacketAmount\n      minExchangeRate\n      paymentPointerId\n      receiveAmount {\n        assetCode\n        assetScale\n        value\n      }\n      receiver\n      sendAmount {\n        assetCode\n        assetScale\n        value\n      }\n    }\n    receiveAmount {\n      assetCode\n      assetScale\n      value\n    }\n    receiver\n    sendAmount {\n      assetCode\n      assetScale\n      value\n    }\n    sentAmount {\n      assetCode\n      assetScale\n      value\n    }\n    state\n    stateAttempts\n  }\n}",
								"variables": "{\n    \"id\": \"{{outgoingPaymentId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Incoming Payment",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetIncomingPayment($id: String!) {\nincomingPayment(id: $id) {\n    id\n    paymentPointerId\n    state\n    expiresAt\n    incomingAmount {\n        value\n        assetCode\n        assetScale\n    }\n    receivedAmount {\n        value\n        assetCode\n        assetScale\n    }\n    metadata\n    createdAt\n  }\n}",
								"variables": "{\n    \"id\": \"{{incomingPaymentId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{PeerGraphqlHost}}/graphql",
							"host": [
								"{{PeerGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deposit Event Liquidity",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation DepositEventLiquidity($input: DepositEventLiquidityInput!) {\n  depositEventLiquidity(input: $input) {\n    code\n    error\n    message\n    success\n  }\n}",
								"variables": "{\n    \"input\": {\n        \"eventId\": \"b4f85d5c-652d-472d-873c-4ba2a5e39052\",\n        \"idempotencyKey\":\"{{$guid}}\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Withdraw Event Liquidity",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation WithdrawEventLiquidity($input: WithdrawEventLiquidityInput!) {\n  withdrawEventLiquidity(input: $input) {\n    code\n    error\n    message\n    success\n  }\n}",
								"variables": "{\n    \"input\": {\n        \"eventId\": \"b4f85d5c-652d-472d-873c-4ba2a5e39052\",\n        \"idempotencyKey\":\"{{$guid}}\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Payment Pointer Withdrawal",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreatePaymentPointerWithdrawal($input: CreatePaymentPointerWithdrawalInput!) {\n  createPaymentPointerWithdrawal(input: $input) {\n    code\n    error\n    message\n    success\n    withdrawal {\n      amount\n      id\n      paymentPointer {\n        id\n        url\n        asset {\n          id\n          code\n          scale\n          withdrawalThreshold\n        }\n      }\n    }\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"id\": \"02ac56f7-ae5d-4abb-8306-17bf2327b43c\",\n    \"paymentPointerId\": \"{{incomingPaymentId}}\",\n    \"idempotencyKey\":\"{{$guid}}\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Trigger Payment Pointer Events",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation TriggerPaymentPointerEvents($input: TriggerPaymentPointerEventsInput!) {\n  triggerPaymentPointerEvents(input: $input) {\n    code\n    count\n    message\n    success\n  }\n}",
								"variables": "{\n    \"input\": {\n        \"limit\": 5\n    }\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Webhook Events",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query WebhookEvents($after: String, $before: String, $first: Int, $last: Int, $filter: WebhookEventFilter) {\n  webhookEvents(after: $after, before: $before, first:$first, last: $last, filter: $filter) {\n    edges {\n      cursor\n      node {\n        createdAt\n        data\n        id\n        type\n      }\n    }\n  }\n}",
								"variables": "{\n    \"filter\": {\n        \"type\": { \n            \"in\": []\n        }\n    },\n    \"after\": null,\n    \"before\": null,\n    \"first\": null,\n    \"last\": null\n}"
							}
						},
						"url": {
							"raw": "{{RafikiGraphqlHost}}/graphql",
							"host": [
								"{{RafikiGraphqlHost}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Open Payments APIs",
			"item": [
				{
					"name": "Payment Pointer",
					"item": [
						{
							"name": "Get a Payment Pointer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "happy-life-bank-backend"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://localhost:4000/accounts/paaaa",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"accounts",
										"paaaa"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a Payment Pointer Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "happy-life-bank-backend"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://localhost:4000/accounts/paaaa",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"accounts",
										"paaaa"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Payment Pointer Keys",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "happy-life-bank-backend"
									}
								],
								"url": {
									"raw": "{{pfryPaymentPointer}}/jwks.json",
									"host": [
										"{{pfryPaymentPointer}}"
									],
									"path": [
										"jwks.json"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "STREAM connection",
					"item": [
						{
							"name": "Get STREAM credentials",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "happy-life-bank-backend"
									}
								],
								"url": {
									"raw": "{{PeerOpenPaymentsHost}}/connections/{{connectionId}}",
									"host": [
										"{{PeerOpenPaymentsHost}}"
									],
									"path": [
										"connections",
										"{{connectionId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Incoming Payments",
					"item": [
						{
							"name": "Create Incoming Payment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"tomorrow\", (new Date(new Date().setDate(new Date().getDate() + 1))).toISOString());",
											"",
											"eval(pm.collectionVariables.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const body = pm.response.json();",
											"pm.collectionVariables.set(\"incomingPaymentId\", body.id.split(\"/\").pop());",
											"pm.collectionVariables.set(\"connectionId\", body.ilpStreamConnection.id.split(\"/\").pop());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									},
									{
										"key": "Host",
										"value": "happy-life-bank-backend"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"incomingAmount\": {\n        \"value\": \"2000\",\n        \"assetCode\": \"USD\",\n        \"assetScale\": 2\n    },\n    \"expiresAt\": \"{{tomorrow}}\",\n    \"metadata\": {\n        \"description\": \"Incoming Payment on Own Account\",\n        \"externalRef\": \"INV-001\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pfryPaymentPointer}}/incoming-payments",
									"host": [
										"{{pfryPaymentPointer}}"
									],
									"path": [
										"incoming-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Incoming Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									},
									{
										"key": "Host",
										"value": "happy-life-bank-backend"
									}
								],
								"url": {
									"raw": "{{pfryPaymentPointer}}/incoming-payments/{{incomingPaymentId}}",
									"host": [
										"{{pfryPaymentPointer}}"
									],
									"path": [
										"incoming-payments",
										"{{incomingPaymentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Incoming Payments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									},
									{
										"key": "Host",
										"value": "happy-life-bank-backend"
									}
								],
								"url": {
									"raw": "{{pfryPaymentPointer}}/incoming-payments?first=10",
									"host": [
										"{{pfryPaymentPointer}}"
									],
									"path": [
										"incoming-payments"
									],
									"query": [
										{
											"key": "cursor",
											"value": "ea3bf38f-2719-4473-a0f7-4ba967d1d81b",
											"disabled": true
										},
										{
											"key": "first",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Complete Incoming Payment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									},
									{
										"key": "Host",
										"value": "happy-life-bank-backend"
									}
								],
								"url": {
									"raw": "{{pfryPaymentPointer}}/incoming-payments/{{incomingPaymentId}}/complete",
									"host": [
										"{{pfryPaymentPointer}}"
									],
									"path": [
										"incoming-payments",
										"{{incomingPaymentId}}",
										"complete"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Quotes",
					"item": [
						{
							"name": "Create Quote",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const body = pm.response.json();",
											"pm.collectionVariables.set(\"quoteId\", body.id.split(\"/\").pop());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									},
									{
										"key": "Host",
										"value": "cloud-nine-wallet-backend"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"receiver\": \"https://happy-life-bank-backend/accounts/pfry/incoming-payments/{{incomingPaymentId}}\",\n    \"sendAmount\": {\n        \"value\": \"1000\",\n        \"assetCode\": \"USD\",\n        \"assetScale\": 2\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gfranklinPaymentPointer}}/quotes",
									"host": [
										"{{gfranklinPaymentPointer}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Quote",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									},
									{
										"key": "Host",
										"value": "cloud-nine-wallet-backend"
									}
								],
								"url": {
									"raw": "{{gfranklinPaymentPointer}}/quotes/{{quoteId}}",
									"host": [
										"{{gfranklinPaymentPointer}}"
									],
									"path": [
										"quotes",
										"{{quoteId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Outgoing Payments",
					"item": [
						{
							"name": "Create Outgoing Payment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const body = pm.response.json();",
											"pm.collectionVariables.set(\"outgoingPaymentId\", body.id.split(\"/\").pop());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									},
									{
										"key": "Host",
										"value": "cloud-nine-wallet-backend"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"quoteId\": \"{{gfranklinPaymentPointer}}/quotes/{{quoteId}}\",\n    \"description\": \"yolo\",\n    \"externalRef\": \"INV-001\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gfranklinPaymentPointer}}/outgoing-payments",
									"host": [
										"{{gfranklinPaymentPointer}}"
									],
									"path": [
										"outgoing-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Outgoing Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									},
									{
										"key": "Host",
										"value": "cloud-nine-wallet-backend"
									}
								],
								"url": {
									"raw": "{{gfranklinPaymentPointer}}/outgoing-payments/{{outgoingPaymentId}}",
									"host": [
										"{{gfranklinPaymentPointer}}"
									],
									"path": [
										"outgoing-payments",
										"{{outgoingPaymentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Outgoing Payments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									},
									{
										"key": "Host",
										"value": "cloud-nine-wallet-backend"
									}
								],
								"url": {
									"raw": "{{gfranklinPaymentPointer}}/outgoing-payments?first=2",
									"host": [
										"{{gfranklinPaymentPointer}}"
									],
									"path": [
										"outgoing-payments"
									],
									"query": [
										{
											"key": "first",
											"value": "2"
										},
										{
											"key": "cursor",
											"value": "ea3bf38f-2719-4473-a0f7-4ba967d1d81b",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Open Payments Auth APIs",
			"item": [
				{
					"name": "Grants",
					"item": [
						{
							"name": "Grant Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();",
											"pm.collectionVariables.set(\"accessToken\", body?.access_token?.value);",
											"pm.collectionVariables.set(\"continueToken\", body.continue.access_token.value);",
											"pm.collectionVariables.set(\"continueId\", body.continue.uri.split(\"/\").pop());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('preRequestSignaturesGrantRequest'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_token\": {\n        \"access\": [\n            {\n                \"type\": \"quote\",\n                \"actions\": [\n                    \"create\", \"read\"\n                ]\n            },\n            {\n                \"type\": \"outgoing-payment\",\n                \"actions\": [\n                    \"create\", \"read\", \"list\"\n                ],\n                \"identifier\": \"http://localhost:3000/accounts/gfranklin\",\n                \"limits\": {\n                    \"sendAmount\": {\n                        \"value\": \"8000\",\n                        \"assetCode\": \"USD\",\n                        \"assetScale\": 2\n                    },\n                    \"receiveAmount\": {\n                        \"value\": \"8000\",\n                        \"assetCode\": \"USD\",\n                        \"assetScale\": 2\n                    }\n                }\n            }\n        ]\n    },\n    \"client\": \"https://happy-life-bank-backend/accounts/pfry\",\n    \"interact\": {\n        \"start\": [\n            \"redirect\"\n        ],\n        \"finish\": {\n            \"method\": \"redirect\",\n            \"uri\": \"http://localhost:3030/mock-idp/fake-client\",\n            \"nonce\": \"123\"\n        }\n    }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{OpenPaymentsAuthHost}}/",
									"host": [
										"{{OpenPaymentsAuthHost}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Continuation Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();",
											"pm.collectionVariables.set(\"accessToken\", body.access_token.value);",
											"pm.collectionVariables.set(\"tokenId\", body.access_token.manage.split('/').pop())"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{continueToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"interact_ref\": \"fdfa9202-3e68-4c2a-8049-25135704a1cb\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{OpenPaymentsAuthHost}}/continue/{{continueId}}",
									"host": [
										"{{OpenPaymentsAuthHost}}"
									],
									"path": [
										"continue",
										"{{continueId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tokens",
					"item": [
						{
							"name": "Rotate Access Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();",
											"pm.collectionVariables.set(\"accessToken\", body.access_token.value);",
											"pm.collectionVariables.set(\"tokenId\", body.access_token.manage.split('/').pop())"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{OpenPaymentsAuthHost}}/token/{{tokenId}}",
									"host": [
										"{{OpenPaymentsAuthHost}}"
									],
									"path": [
										"token",
										"{{tokenId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke Access Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{OpenPaymentsAuthHost}}/token/{{tokenId}}",
									"host": [
										"{{OpenPaymentsAuthHost}}"
									],
									"path": [
										"token",
										"{{tokenId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Examples",
			"item": [
				{
					"name": "eCommerce",
					"item": [
						{
							"name": "Grant Request Incoming Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();",
											"pm.collectionVariables.set(\"accessToken\", body?.access_token?.value);",
											"pm.collectionVariables.set(\"continueToken\", body.continue.access_token.value);",
											"pm.collectionVariables.set(\"continueId\", body.continue.uri.split(\"/\").pop());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('preRequestSignaturesGrantRequest'))",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_token\": {\n        \"access\": [\n            {\n                \"type\": \"incoming-payment\",\n                \"actions\": [\n                    \"create\", \"read\", \"list\", \"complete\"\n                ]\n            }\n        ]\n    },\n    \"client\": \"https://happy-life-bank-backend/accounts/pfry\",\n    \"interact\": {\n        \"start\": [\n            \"redirect\"\n        ],\n        \"finish\": {\n            \"method\": \"redirect\",\n            \"uri\": \"http://localhost:3030/mock-idp/fake-client\",\n            \"nonce\": \"123\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PeerOpenPaymentsAuthHost}}/",
									"host": [
										"{{PeerOpenPaymentsAuthHost}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Incoming Payment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"tomorrow\", (new Date(new Date().setDate(new Date().getDate() + 1))).toISOString());",
											"",
											"eval(pm.collectionVariables.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const body = pm.response.json();",
											"pm.collectionVariables.set(\"incomingPaymentId\", body.id.split(\"/\").pop());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									},
									{
										"key": "Host",
										"value": "happy-life-bank-backend"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"incomingAmount\": {\n        \"value\": \"3364\",\n        \"assetCode\": \"USD\",\n        \"assetScale\": 2\n    },\n    \"expiresAt\": \"{{tomorrow}}\",\n    \"metadata\": {\n        \"description\": \"Purchase Shoe Shop\", \n        \"externalRef\": \"#INV2022-8363828\",\n        \"items\": [1,2,3,4]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pfryPaymentPointer}}/incoming-payments",
									"host": [
										"{{pfryPaymentPointer}}"
									],
									"path": [
										"incoming-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Grant Request Quote",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();",
											"pm.collectionVariables.set(\"accessToken\", body?.access_token?.value);",
											"pm.collectionVariables.set(\"continueToken\", body.continue.access_token.value);",
											"pm.collectionVariables.set(\"continueId\", body.continue.uri.split(\"/\").pop());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('preRequestSignaturesGrantRequest'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_token\": {\n        \"access\": [\n            {\n                \"type\": \"quote\",\n                \"actions\": [\n                    \"create\", \"read\"\n                ]\n            }\n        ]\n    },\n    \"client\": \"https://happy-life-bank-backend/accounts/pfry\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{OpenPaymentsAuthHost}}/",
									"host": [
										"{{OpenPaymentsAuthHost}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Quote",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const body = pm.response.json();",
											"pm.collectionVariables.set(\"quoteId\", body.id.split(\"/\").pop());",
											"pm.collectionVariables.set(\"quoteSendAmountValue\", body.sendAmount.value)",
											"pm.collectionVariables.set(\"quoteReceiveAmountValue\", body.receiveAmount.value)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									},
									{
										"key": "Host",
										"value": "cloud-nine-wallet-backend"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"receiver\": \"https://happy-life-bank-backend/accounts/pfry/incoming-payments/{{incomingPaymentId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gfranklinPaymentPointer}}/quotes",
									"host": [
										"{{gfranklinPaymentPointer}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Grant Request Outgoing Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();",
											"pm.collectionVariables.set(\"accessToken\", body?.access_token?.value);",
											"pm.collectionVariables.set(\"continueToken\", body.continue.access_token.value);",
											"pm.collectionVariables.set(\"continueId\", body.continue.uri.split(\"/\").pop());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('preRequestSignaturesGrantRequest'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_token\": {\n        \"access\": [\n            {\n                \"type\": \"outgoing-payment\",\n                \"actions\": [\n                    \"create\", \"read\", \"list\"\n                ],\n                \"identifier\": \"https://cloud-nine-wallet-backend/accounts/gfranklin\",\n                \"limits\": {\n                    \"sendAmount\": {\n                        \"value\": \"{{quoteSendAmountValue}}\",\n                        \"assetCode\": \"USD\",\n                        \"assetScale\": 2\n                    },\n                    \"receiveAmount\": {\n                        \"value\": \"{{quoteReceiveAmountValue}}\",\n                        \"assetCode\": \"USD\",\n                        \"assetScale\": 2\n                    }\n                }\n            }\n        ]\n    },\n    \"client\": \"https://happy-life-bank-backend/accounts/pfry\",\n    \"interact\": {\n        \"start\": [\n            \"redirect\"\n        ],\n        \"finish\": {\n            \"method\": \"redirect\",\n            \"uri\": \"http://localhost:3030/mock-idp/fake-client\",\n            \"nonce\": \"456\"\n        }\n    }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{OpenPaymentsAuthHost}}/",
									"host": [
										"{{OpenPaymentsAuthHost}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Continuation Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();",
											"pm.collectionVariables.set(\"accessToken\", body.access_token.value);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{continueToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"interact_ref\": \"f4c980dc-8715-47ee-a322-314e0f8b74c9\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{OpenPaymentsAuthHost}}/continue/{{continueId}}",
									"host": [
										"{{OpenPaymentsAuthHost}}"
									],
									"path": [
										"continue",
										"{{continueId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Outgoing Payment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const body = pm.response.json();",
											"pm.collectionVariables.set(\"outgoingPaymentId\", body.id.split(\"/\").pop());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									},
									{
										"key": "Host",
										"value": "cloud-nine-wallet-backend"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"quoteId\": \"{{gfranklinPaymentPointer}}/quotes/{{quoteId}}\",\n    \"metadata\": {\n        \"description\": \"Your purchase at Shoe Shop\",\n        \"externalRef\": \"#INV2022-8363828\",\n        \"items\": [1,2,3,4]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gfranklinPaymentPointer}}/outgoing-payments",
									"host": [
										"{{gfranklinPaymentPointer}}"
									],
									"path": [
										"outgoing-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Outgoing Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('preRequestSignatures'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									},
									{
										"key": "Host",
										"value": "cloud-nine-wallet-backend"
									}
								],
								"url": {
									"raw": "{{gfranklinPaymentPointer}}/outgoing-payments/{{outgoingPaymentId}}",
									"host": [
										"{{gfranklinPaymentPointer}}"
									],
									"path": [
										"outgoing-payments",
										"{{outgoingPaymentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Peer-to-Peer Payment",
					"item": [
						{
							"name": "Create Receiver (remote Incoming Payment)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();",
											"",
											"pm.collectionVariables.set(\"receiverId\", body.data.createReceiver.receiver.id);",
											"pm.expect(pm.collectionVariables.get(\"receiverId\")).to.be.a('string');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateReceiver($input: CreateReceiverInput!) {\n  createReceiver(input: $input) {\n    code\n    message\n    receiver {\n      completed\n      createdAt\n      expiresAt\n      metadata\n      id\n      incomingAmount {\n        assetCode\n        assetScale\n        value\n      }\n      paymentPointerUrl\n      receivedAmount {\n        assetCode\n        assetScale\n        value\n      }\n      updatedAt\n    }\n    success\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"metadata\": {\n        \"description\": \"For lunch\"\n    },\n    \"incomingAmount\": {\n      \"assetCode\": \"USD\",\n      \"assetScale\": 2,\n      \"value\": 500\n    },\n    \"paymentPointerUrl\": \"https://happy-life-bank-backend/accounts/pfry\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{RafikiGraphqlHost}}/graphql",
									"host": [
										"{{RafikiGraphqlHost}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Quote",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();",
											"",
											"pm.collectionVariables.set(\"quoteId\", body.data.createQuote.quote.id);",
											"pm.expect(pm.collectionVariables.get(\"quoteId\")).to.be.a('string');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"const getPaymentPointersQuery = `",
											"query GetPaymentPointers {",
											"    paymentPointers {",
											"        edges {",
											"            cursor",
											"            node {",
											"                id",
											"                publicName",
											"                url",
											"            }",
											"        }",
											"    }",
											"}`",
											"",
											"const postRequest = {",
											"  url: `${pm.collectionVariables.get(\"RafikiGraphqlHost\")}/graphql`,",
											"  method: 'POST',",
											"  body: {",
											"    mode: 'graphql',",
											"    graphql: {",
											"        query:getPaymentPointersQuery",
											"    }",
											"  }",
											"};",
											"",
											"",
											"pm.sendRequest(postRequest, (error, response) => {",
											"    const body = response.json();",
											"    const gfranklinPaymentPointerId = body.data.paymentPointers.edges.map(e => e.node).find(node => node.publicName === 'Grace Franklin')?.id",
											"",
											"    pm.collectionVariables.set(\"gfranklinPaymentPointerId\", gfranklinPaymentPointerId)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateQuote($input: CreateQuoteInput!) {\n  createQuote(input: $input) {\n    code\n    message\n    quote {\n      createdAt\n      expiresAt\n      highEstimatedExchangeRate\n      id\n      lowEstimatedExchangeRate\n      maxPacketAmount\n      minExchangeRate\n      paymentPointerId\n      receiveAmount {\n        assetCode\n        assetScale\n        value\n      }\n      receiver\n      sendAmount {\n        assetCode\n        assetScale\n        value\n      }\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"paymentPointerId\": \"{{gfranklinPaymentPointerId}}\",\n    \"receiver\": \"{{receiverId}}\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{RafikiGraphqlHost}}/graphql",
									"host": [
										"{{RafikiGraphqlHost}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Outgoing Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();",
											"",
											"pm.collectionVariables.set(\"outgoingPaymentId\", body.data.createOutgoingPayment.payment.id);",
											"pm.expect(pm.collectionVariables.get(\"outgoingPaymentId\")).to.be.a('string');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateOutgoingPayment($input: CreateOutgoingPaymentInput!) {\n  createOutgoingPayment(input: $input) {\n    code\n    message\n    payment {\n      createdAt\n      error\n      metadata\n      id\n      paymentPointerId\n      receiveAmount {\n        assetCode\n        assetScale\n        value\n      }\n      receiver\n      sendAmount {\n        assetCode\n        assetScale\n        value\n      }\n      sentAmount {\n        assetCode\n        assetScale\n        value\n      }\n      state\n      stateAttempts\n    }\n    success\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"paymentPointerId\": \"{{gfranklinPaymentPointerId}}\",\n    \"quoteId\": \"{{quoteId}}\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{RafikiGraphqlHost}}/graphql",
									"host": [
										"{{RafikiGraphqlHost}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Outgoing Payment",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetOutgoingPayment($id: String!) {\noutgoingPayment(id: $id) {\n    createdAt\n    error\n    metadata\n    id\n    paymentPointerId\n    quote {\n      id\n    }\n    receiveAmount {\n      assetCode\n      assetScale\n      value\n    }\n    receiver\n    sendAmount {\n      assetCode\n      assetScale\n      value\n    }\n    sentAmount {\n      assetCode\n      assetScale\n      value\n    }\n    state\n    stateAttempts\n  }\n}",
										"variables": "{\n    \"id\": \"{{outgoingPaymentId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{RafikiGraphqlHost}}/graphql",
									"host": [
										"{{RafikiGraphqlHost}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Demos",
			"item": [
				{
					"name": "ILP Summit Demo",
					"item": [
						{
							"name": "Grant Request Incoming Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();",
											"pm.environment.set(\"accessToken\", body?.access_token?.value);",
											"pm.environment.set(\"continueToken\", body.continue.access_token.value);",
											"pm.environment.set(\"continueId\", body.continue.uri.split(\"/\").pop());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Signature-Input",
										"value": "TODO",
										"type": "text"
									},
									{
										"key": "Signature",
										"value": "TODO",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_token\": {\n        \"access\": [\n            {\n                \"type\": \"incoming-payment\",\n                \"actions\": [\n                    \"create\", \"read\", \"list\", \"complete\"\n                ]\n            }\n        ]\n    },\n    \"client\": {\n        \"display\": {\n            \"name\": \"Shoe Shop\",\n            \"uri\": \"https://www.saagershoeshop.com\"\n        },\n        \"key\": {\n            \"proof\": \"httpsig\",\n            \"jwk\": {\n                \"alg\": \"EdDSA\",\n                \"kty\": \"OKP\",\n                \"use\": \"sig\",\n                \"crv\": \"Ed25519\",\n                \"kid\": \"http://fynbos/keys/12345\",\n                \"x\": \"jfiusdhvherui4vueurygygb8\"\n            }\n        }\n    },\n    \"interact\": {\n        \"start\": [\n            \"redirect\"\n        ],\n        \"finish\": {\n            \"method\": \"redirect\",\n            \"uri\": \"http://localhost:3030/mock-idp/fake-client\",\n            \"nonce\": \"123\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BankOpenPaymentsAuthHost}}/",
									"host": [
										"{{BankOpenPaymentsAuthHost}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Incoming Payment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"tomorrow\", (new Date(new Date().setDate(new Date().getDate() + 1))).toISOString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const body = pm.response.json();",
											"pm.environment.set(\"incomingPaymentId\", body.id.split(\"/\").pop());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}"
									},
									{
										"key": "Host",
										"value": "peer-backend"
									},
									{
										"key": "Signature-Input",
										"value": "TODO",
										"type": "text"
									},
									{
										"key": "Signature",
										"value": "TODO",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"incomingAmount\": {\n        \"value\": \"3364\",\n        \"assetCode\": \"USD\",\n        \"assetScale\": 2\n    },\n    \"expiresAt\": \"{{tomorrow}}\",\n    \"metadata\": {\n        \"description\": \"Purchase Shoe Shop\",\n        \"externalRef\": \"#INV2022-8363828\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PhilipFryPaymentPointer}}/incoming-payments",
									"host": [
										"{{PhilipFryPaymentPointer}}"
									],
									"path": [
										"incoming-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Grant Request Quote + Outgoing Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();",
											"pm.environment.set(\"accessToken\", body?.access_token?.value);",
											"pm.environment.set(\"continueToken\", body.continue.access_token.value);",
											"pm.environment.set(\"continueId\", body.continue.uri.split(\"/\").pop());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Signature-Input",
										"value": "TODO",
										"type": "text"
									},
									{
										"key": "Signature",
										"value": "TODO",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_token\": {\n        \"access\": [\n            {\n                \"type\": \"quote\",\n                \"actions\": [\n                    \"create\", \"read\"\n                ]\n            },\n            {\n                \"type\": \"outgoing-payment\",\n                \"actions\": [\n                    \"create\", \"read\", \"list\"\n                ],\n                \"identifier\": \"https://backend/accounts/gfranklin\",\n                \"limits\": {\n                    \"sendAmount\": {\n                        \"value\": \"3600\",\n                        \"assetCode\": \"USD\",\n                        \"assetScale\": 2\n                    },\n                    \"receiveAmount\": {\n                        \"value\": \"3364\",\n                        \"assetCode\": \"USD\",\n                        \"assetScale\": 2\n                    }\n                }\n            }\n        ]\n    },\n    \"client\": {\n        \"display\": {\n            \"name\": \"Shoe Shop\",\n            \"uri\": \"https://www.saagershoeshop.com\"\n        },\n        \"key\": {\n            \"proof\": \"httpsig\",\n            \"jwk\": {\n                \"alg\": \"EdDSA\",\n                \"kty\": \"OKP\",\n                \"use\": \"sig\",\n                \"crv\": \"Ed25519\",\n                \"kid\": \"http://fynbos/keys/12345\",\n                \"x\": \"jfiusdhvherui4vueurygygb8\"\n            }\n        }\n    },\n    \"interact\": {\n        \"start\": [\n            \"redirect\"\n        ],\n        \"finish\": {\n            \"method\": \"redirect\",\n            \"uri\": \"http://localhost:3030/mock-idp/fake-client\",\n            \"nonce\": \"456\"\n        }\n    }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{FynbosOpenPaymentsAuthHost}}/",
									"host": [
										"{{FynbosOpenPaymentsAuthHost}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Continuation Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();",
											"pm.environment.set(\"accessToken\", body.access_token.value);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{continueToken}}",
										"type": "text"
									},
									{
										"key": "Signature-Input",
										"value": "TODO",
										"type": "text"
									},
									{
										"key": "Signature",
										"value": "TODO",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"interact_ref\": \"a31b55bf-2d1e-44eb-b99e-0d98a1a953f4\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{FynbosOpenPaymentsAuthHost}}/continue/{{continueId}}",
									"host": [
										"{{FynbosOpenPaymentsAuthHost}}"
									],
									"path": [
										"continue",
										"{{continueId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Quote",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const body = pm.response.json();",
											"pm.environment.set(\"quoteId\", body.id.split(\"/\").pop());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}",
										"type": "text"
									},
									{
										"key": "Host",
										"value": "backend",
										"type": "text"
									},
									{
										"key": "Signature-Input",
										"value": "TODO",
										"type": "text"
									},
									{
										"key": "Signature",
										"value": "TODO",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"receiver\": \"https://peer-backend/accounts/pfry/incoming-payments/{{incomingPaymentId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{GraceFranklinPaymentPointer}}/quotes",
									"host": [
										"{{GraceFranklinPaymentPointer}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Outgoing Payment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const body = pm.response.json();",
											"pm.environment.set(\"outgoingPaymentId\", body.id.split(\"/\").pop());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}",
										"type": "text"
									},
									{
										"key": "Host",
										"value": "backend",
										"type": "text"
									},
									{
										"key": "Signature-Input",
										"value": "TODO",
										"type": "text"
									},
									{
										"key": "Signature",
										"value": "TODO",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"quoteId\": \"{{GraceFranklinPaymentPointer}}/quotes/{{quoteId}}\",\n    \"metadata\": {\n        \"description\": \"Your purchase at Shoe Shop\",\n        \"externalRef\": \"#INV2022-8363828\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{GraceFranklinPaymentPointer}}/outgoing-payments",
									"host": [
										"{{GraceFranklinPaymentPointer}}"
									],
									"path": [
										"outgoing-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Outgoing Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "GNAP {{accessToken}}",
										"type": "text"
									},
									{
										"key": "Host",
										"value": "backend",
										"type": "text"
									},
									{
										"key": "Signature-Input",
										"value": "TODO",
										"type": "text"
									},
									{
										"key": "Signature",
										"value": "TODO",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{GraceFranklinPaymentPointer}}/outgoing-payments/{{outgoingPaymentId}}",
									"host": [
										"{{GraceFranklinPaymentPointer}}"
									],
									"path": [
										"outgoing-payments",
										"{{outgoingPaymentId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "OpenPaymentsHost",
			"value": "http://localhost:3000"
		},
		{
			"key": "PeerOpenPaymentsHost",
			"value": "http://localhost:4000"
		},
		{
			"key": "OpenPaymentsAuthHost",
			"value": "http://localhost:3006"
		},
		{
			"key": "PeerOpenPaymentsAuthHost",
			"value": "http://localhost:4006"
		},
		{
			"key": "RafikiGraphqlHost",
			"value": "http://localhost:3001"
		},
		{
			"key": "PeerGraphqlHost",
			"value": "http://localhost:4001"
		},
		{
			"key": "SignatureHost",
			"value": "http://localhost:3040"
		},
		{
			"key": "PeerSignatureHost",
			"value": "http://localhost:3041"
		},
		{
			"key": "gfranklinPaymentPointer",
			"value": "http://localhost:3000/accounts/gfranklin"
		},
		{
			"key": "asmithPaymentPointer",
			"value": "http://localhost:4000/accounts/asmith",
			"type": "string"
		},
		{
			"key": "gfranklinPaymentPointerId",
			"value": "6abd8671-72d0-41ee-8e0a-0b28eff522a5",
			"type": "string"
		},
		{
			"key": "pfryPaymentPointer",
			"value": "http://localhost:4000/accounts/pfry"
		},
		{
			"key": "accessToken",
			"value": "example-access-token"
		},
		{
			"key": "paymentPointerId",
			"value": "bde8da93-9bff-4251-90ce-abb15e7d444c"
		},
		{
			"key": "incomingPaymentId",
			"value": "dc7b71a5-d78e-450c-b4c5-7db299f2a133"
		},
		{
			"key": "connectionId",
			"value": "23de6081-b340-4334-b335-a2328bbb3334"
		},
		{
			"key": "outgoingPaymentId",
			"value": "empty"
		},
		{
			"key": "quoteId",
			"value": "http://backend/d982ab2f-4380-4d05-be3b-43d23a57d23f/quotes/8adaa7f9-fbd2-4cc2-89b5-6f354d68728e"
		},
		{
			"key": "tokenId",
			"value": "f6cf615c-70e8-4b04-bd86-0d6ac41a4c85"
		},
		{
			"key": "tomorrow",
			"value": ""
		},
		{
			"key": "uniquePaymentPointer",
			"value": ""
		},
		{
			"key": "quoteUrl",
			"value": ""
		},
		{
			"key": "incomingPaymentUrl",
			"value": ""
		},
		{
			"key": "continueToken",
			"value": ""
		},
		{
			"key": "continueId",
			"value": ""
		},
		{
			"key": "paymentPointerUrl",
			"value": ""
		},
		{
			"key": "createPaymentPointerRequest",
			"value": ""
		},
		{
			"key": "secondPaymentPointerId",
			"value": ""
		},
		{
			"key": "assetId",
			"value": ""
		},
		{
			"key": "preRequestSignatures",
			"value": "const requestUrl = request.url\n  .replace(/{{([A-Za-z]\\w+)}}/g, (_, key) => pm.collectionVariables.get(key))\n  .replace(/localhost:([3,4])000/g, (_, key) =>\n    key === '3' ? 'cloud-nine-wallet-backend' : 'happy-life-bank-backend'\n  )\nconst requestBody =\n  request.method === 'POST' && Object.keys(request.data).length !== 0\n    ? request.data.replace(/{{([A-Za-z]\\w+)}}/g, (_, key) =>\n        pm.collectionVariables.get(key)\n      )\n    : undefined\nconst requestHeaders = JSON.parse(\n  JSON.stringify(request.headers).replace(/{{([A-Za-z]\\w+)}}/g, (_, key) =>\n    pm.collectionVariables.get(key)\n  )\n)\n// Request Signature Headers\npm.sendRequest(\n  {\n    url: pm.collectionVariables.get('signatureUrl'),\n    method: 'POST',\n    header: {\n      'content-type': 'application/json'\n    },\n    body: {\n      mode: 'raw',\n      raw: JSON.stringify({\n        keyId: pm.collectionVariables.get('keyId'),\n        request: {\n          url: requestUrl,\n          method: request.method,\n          headers: requestHeaders,\n          body: requestBody\n        }\n      })\n    }\n  },\n  (_, res) => {\n    const headers = res.json()\n    for (let [key, value] of Object.entries(headers)) {\n      pm.request.headers.add({ key, value })\n    }\n  }\n)\n"
		},
		{
			"key": "preRequestSignaturesGrantRequest",
			"value": "const url = require('url')\n\nconst body = JSON.parse(request.data)\nconst client = url.parse(body.client)\nconst jwkUrl = `http://localhost:${\n  client.host === 'cloud-nine-wallet-backend' ? '3' : '4'\n}000${client.path}/jwks.json`\npm.collectionVariables.set(\n  'signatureUrl',\n  pm.collectionVariables.get(\n    client.host === 'cloud-nine-wallet-backend'\n      ? 'SignatureHost'\n      : 'PeerSignatureHost'\n  )\n)\n\nconst requestUrl = request.url.replace(/{{([A-Za-z]\\w+)}}/g, (_, key) =>\n  pm.collectionVariables.get(key)\n)\nconst requestBody = request.data.replace(/{{([A-Za-z]\\w+)}}/g, (_, key) =>\n  pm.collectionVariables.get(key)\n)\nconst requestHeaders = JSON.parse(\n  JSON.stringify(request.headers).replace(/{{([A-Za-z]\\w+)}}/g, (_, key) =>\n    pm.collectionVariables.get(key)\n  )\n)\n\n// Request Client JWK\npm.sendRequest(\n  {\n    url: jwkUrl,\n    method: 'GET',\n    header: {\n      Host: client.host\n    }\n  },\n  (err, res) => {\n    const keys = res.json()\n    pm.collectionVariables.set('keyId', keys.keys[0].kid)\n\n    // Request Signature Headers\n    pm.sendRequest(\n      {\n        url: pm.collectionVariables.get('signatureUrl'),\n        method: 'POST',\n        header: {\n          'content-type': 'application/json'\n        },\n        body: {\n          mode: 'raw',\n          raw: JSON.stringify({\n            keyId: pm.collectionVariables.get('keyId'),\n            request: {\n              url: requestUrl,\n              method: request.method,\n              headers: requestHeaders,\n              body: requestBody\n            }\n          })\n        }\n      },\n      (_, res) => {\n        const headers = res.json()\n        for (let [key, value] of Object.entries(headers)) {\n          pm.request.headers.add({ key, value })\n        }\n      }\n    )\n  }\n)\n"
		},
		{
			"key": "signatureUrl",
			"value": ""
		},
		{
			"key": "keyId",
			"value": ""
		},
		{
			"key": "peerId",
			"value": ""
		},
		{
			"key": "paymentPointerKeyId",
			"value": ""
		},
		{
			"key": "secureOpenPaymentsHost",
			"value": ""
		},
		{
			"key": "tokenManagementUrl",
			"value": ""
		},
		{
			"key": "quoteSendAmountValue",
			"value": ""
		},
		{
			"key": "quoteReceiveAmountValue",
			"value": ""
		},
		{
			"key": "idempotencyKey",
			"value": ""
		},
		{
			"key": "receiverId",
			"value": ""
		}
	]
}