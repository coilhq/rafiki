type Query {
  "Get a deposit by ID."
  deposit("The ID of the deposit to get." id: ID!): Deposit!

  "Get a withdrawal by ID."
  withdrawal("The ID of the withdrawal to get." id: ID!): Withdrawal!
}

type Mutation {
  "Transfer between Interledger accounts"
  transfer(
    sourceAmount: UInt64!
    sourceAccountId: ID!
    destinationAccountId: ID!
    destinationAmount: UInt64
    autoCommit: Boolean
    idempotencyKey: ID!
  ): TransferMutationResponse

  "Extend Credit"
  extendCredit(input: ExtendCreditInput!): ExtendCreditMutationResponse

  "Revoke Credit"
  revokeCredit(input: RevokeCreditInput!): RevokeCreditMutationResponse

  "Utilize Credit"
  utilizeCredit(input: UtilizeCreditInput!): UtilizeCreditMutationResponse

  "Settle Debt"
  settleDebt(input: SettleDebtInput): SettleDebtMutationResponse

  "Create deposit"
  createDeposit(input: CreateDepositInput!): CreateDepositMutationResponse

  "Create withdrawal"
  createWithdrawal(
    input: CreateWithdrawalInput!
  ): CreateWithdrawalMutationResponse

  "Finalize pending withdrawal"
  finalizePendingWithdrawal(
    "The id of the pending withdrawal to finalize."
    withdrawalId: ID!
  ): FinalizePendingWithdrawalMutationResponse

  "Rollback pending withdrawal"
  rollbackPendingWithdrawal(
    "The id of the pending withdrawal to rollback."
    withdrawalId: ID!
  ): RollbackPendingWithdrawalMutationResponse
}

input CreateDepositInput {
  "The id of the account to create the deposit for."
  ilpAccountId: ID!
  "Amount of deposit."
  amount: UInt64!
  "The id of the deposit."
  id: ID
}

input CreateWithdrawalInput {
  "The id of the account to create the withdrawal for."
  ilpAccountId: ID!
  "Amount of deposit."
  amount: UInt64!
  "The id of the withdrawal."
  id: ID
}

input ExtendCreditInput {
  "Account extending credit."
  accountId: ID!
  "Sub-account to which credit is extended."
  subAccountId: ID!
  "Amount of additional line of credit."
  amount: UInt64!
  "Automatically utilized and applied to the account balance."
  autoApply: Boolean! = false
}

input RevokeCreditInput {
  "Account revoking credit."
  accountId: ID!
  "Sub-account to which credit is revoked."
  subAccountId: ID!
  "Amount of revoked line of credit."
  amount: UInt64!
}

input UtilizeCreditInput {
  "Account extending credit."
  accountId: ID!
  "Sub-account to which credit is extended."
  subAccountId: ID!
  "Amount of utilized line of credit."
  amount: UInt64!
}

input SettleDebtInput {
  "Account collecting debt."
  accountId: ID!
  "Sub-account settling debt."
  subAccountId: ID!
  "Amount of debt."
  amount: UInt64!
  "Replenish the account's line of credit commensurate with the debt settled."
  revolve: Boolean! = true
}

enum CreditError {
  SameAccounts
  UnknownAccount
  UnrelatedSubAccount
  UnknownSubAccount
  InsufficientBalance
  InsufficientCredit
  InsufficientDebt
}

enum WithdrawalError {
  AlreadyFinalized
  AlreadyRolledBack
  InsufficientBalance
  InsufficientLiquidity
  InsufficientSettlementBalance
  InvalidId
  UnknownAccount
  UnknownAsset
  UnknownWithdrawal
  WithdrawalExists
}

type IlpAccount {
  deposits(
    "Paginating forwards: the cursor before the the requested page."
    after: String
    "Paginating backwards: the cursor after the the requested page."
    before: String
    "Paginating forwards: The first **n** elements from the page."
    first: Int
    "Paginating backwards: The last **n** elements from the page."
    last: Int
  ): DepositsConnection!
  withdrawals(
    "Paginating forwards: the cursor before the the requested page."
    after: String
    "Paginating backwards: the cursor after the the requested page."
    before: String
    "Paginating forwards: The first **n** elements from the page."
    first: Int
    "Paginating backwards: The last **n** elements from the page."
    last: Int
  ): WithdrawalsConnection!
}

type DepositsConnection {
  pageInfo: PageInfo!
  edges: [DepositEdge!]!
}

type DepositEdge {
  node: Deposit!
  cursor: String!
}

type Deposit {
  id: ID!
  amount: UInt64!
  ilpAccountId: ID!
  # createdTime: Int!
}

type WithdrawalsConnection {
  pageInfo: PageInfo!
  edges: [WithdrawalEdge!]!
}

type WithdrawalEdge {
  node: Withdrawal!
  cursor: String!
}

type Withdrawal {
  id: ID!
  amount: UInt64!
  ilpAccountId: ID!
  # createdTime: Int!
  # finalizedTime: Int
}

type TransferMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

type ExtendCreditMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  error: CreditError
}

type RevokeCreditMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  error: CreditError
}

type UtilizeCreditMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  error: CreditError
}

type SettleDebtMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  error: CreditError
}

type CreateDepositMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  deposit: Deposit
}

type CreateWithdrawalMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  withdrawal: Withdrawal
  error: WithdrawalError
}

type FinalizePendingWithdrawalMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  error: WithdrawalError
}

type RollbackPendingWithdrawalMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  error: WithdrawalError
}

type PageInfo {
  "Paginating forwards: the cursor to continue."
  endCursor: String
  "Paginating forwards: Are there more pages?"
  hasNextPage: Boolean!
  "Paginating backwards: Are there more pages?"
  hasPreviousPage: Boolean!
  "Paginating backwards: the cursor to continue."
  startCursor: String
}
