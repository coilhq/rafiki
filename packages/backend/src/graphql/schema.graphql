type Query {
  account(id: String!): Account

  "Fetch a page of accounts."
  accounts(input: PaginationInput): AccountsConnection!

  outgoingPayment(id: String!): OutgoingPayment

  "Get a webhook by ID."
  webhook("The ID of the webhook to get." id: String!): Webhook!
}

type Mutation {
  "Create account"
  createAccount(input: CreateAccountInput!): CreateAccountMutationResponse!

  "Update account"
  updateAccount(input: UpdateAccountInput!): UpdateAccountMutationResponse!

  "Delete account"
  deleteAccount(id: String!): DeleteAccountMutationResponse!

  "Create sub-account"
  createSubAccount(superAccountId: String!): CreateSubAccountMutationResponse!

  createOutgoingPayment(
    input: CreateOutgoingPaymentInput!
  ): OutgoingPaymentResponse!
  "Approve a Ready payment's quote."
  approveOutgoingPayment(paymentId: String!): OutgoingPaymentResponse!
  "Requote a Cancelled payment."
  requoteOutgoingPayment(paymentId: String!): OutgoingPaymentResponse!
  "Cancel a Ready payment."
  cancelOutgoingPayment(paymentId: String!): OutgoingPaymentResponse!

  "Create webhook"
  createWebhook(
    "The id of the account to create the webhook for."
    ilpAccountId: String!
  ): CreateWebhookMutationResponse

  "Update webhook"
  updateWebhook(
    "The id of the webhook to update."
    webhookId: ID!
  ): UpdateWebhookMutationResponse

  "Delete webhook"
  deleteWebhook(
    "The id of the webhook to delete."
    webhookId: ID!
  ): DeleteWebhookMutationResponse
}

input PaginationInput {
  "Paginating forwards: the cursor before the the requested page."
  after: String
  "Paginating backwards: the cursor after the the requested page."
  before: String
  "Paginating forwards: The first **n** elements from the page."
  first: Int
  "Paginating backwards: The last **n** elements from the page."
  last: Int
}

type PageInfo {
  "Paginating forwards: the cursor to continue."
  endCursor: String
  "Paginating forwards: Are there more pages?"
  hasNextPage: Boolean!
  "Paginating backwards: Are there more pages?"
  hasPreviousPage: Boolean!
  "Paginating backwards: the cursor to continue."
  startCursor: String
}

type AccountsConnection {
  pageInfo: PageInfo!
  edges: [AccountEdge!]!
}

type SubAccountsConnection {
  pageInfo: PageInfo!
  edges: [AccountEdge!]!
}

type AccountEdge {
  node: Account!
  cursor: String!
}

input CreateAccountInput {
  id: String
  disabled: Boolean
  maxPacketAmount: UInt64
  http: HttpInput
  asset: AssetInput!
  stream: StreamInput
  routing: RoutingInput
}

input UpdateAccountInput {
  id: String
  disabled: Boolean
  maxPacketAmount: UInt64
  http: HttpInput
  stream: StreamInput
  routing: RoutingInput
}

input HttpInput {
  incoming: HttpIncomingInput!
  outgoing: HttpOutgoingInput!
}

input HttpIncomingInput {
  authTokens: [String!]!
}

input HttpOutgoingInput {
  authToken: String!
  endpoint: String!
}

input AssetInput {
  code: String!
  scale: Int!
}

input StreamInput {
  enabled: Boolean!
}

input RoutingInput {
  staticIlpAddress: String!
}

type Asset {
  code: String!
  scale: Int!
}

type Account {
  id: ID!
  disabled: Boolean!
  superAccountId: ID
  superAccount: Account
  subAccounts(input: PaginationInput): SubAccountsConnection!
  maxPacketAmount: UInt64
  http: Http
  asset: Asset!
  stream: Stream!
  routing: Routing

  balance: Balance!
  invoices(input: PaginationInput): InvoiceConnection
  webhooks(input: PaginationInput): WebhooksConnection!
}

type Http {
  outgoing: HttpOutgoing!
}

type HttpOutgoing {
  authToken: String!
  endpoint: String!
}

type Stream {
  enabled: Boolean!
}

type Routing {
  staticIlpAddress: String!
  inheritFromRemote: Boolean
  dynamicIlpAddress: String
}

type Balance {
  balance: UInt64!
  netLiability: UInt64
  netAssets: UInt64
  creditExtended: UInt64!
  totalLent: UInt64!
  availableCredit: UInt64!
  totalBorrowed: UInt64!
}

type InvoiceConnection {
  pageInfo: PageInfo!
  edges: [InvoiceEdge!]!
}

type InvoiceEdge {
  node: Invoice!
  cursor: String!
}

type Invoice {
  id: ID!
  receivedAmount: Int!
  maximumAmount: Int
  asset: Asset!
  active: Boolean!
  createdAt: String!
  expiresAt: String
  description: String
  totalAmount: String!
}

type OutgoingPayment {
  id: ID!
  state: PaymentState!
  error: String
  stateAttempts: Int!
  intent: PaymentIntent
  quote: PaymentQuote
  superAccountId: String!
  sourceAccount: PaymentSourceAccount!
  destinationAccount: PaymentDestinationAccount!
  outcome: OutgoingPaymentOutcome!
}

type PaymentIntent {
  paymentPointer: String
  amountToSend: String #UInt64
  invoiceUrl: String
  autoApprove: Boolean!
}

enum PaymentState {
  "Will transition to READY when quote is complete"
  INACTIVE
  "Quote ready; awaiting user approval (ACTIVATED) or refusal (CANCELLING)"
  READY
  "Will transition to SENDING once payment funds are reserved"
  ACTIVATED
  "Paying, will transition to COMPLETED on success"
  SENDING
  "Will transition to CANCELLED when reserved funds are rolled back"
  CANCELLING
  "Payment aborted; can be requoted to INACTIVE"
  CANCELLED
  "Successfuly completion"
  COMPLETED
}

enum PaymentType {
  FIXED_SEND
  FIXED_DELIVERY
}

type PaymentQuote {
  timestamp: String!
  activationDeadline: String!
  targetType: PaymentType!
  minDeliveryAmount: String! #UInt64!
  maxSourceAmount: String! #UInt64!
  maxPacketAmount: String! #UInt64!
  minExchangeRate: Float!
  lowExchangeRateEstimate: Float!
  highExchangeRateEstimate: Float!
}

type PaymentSourceAccount {
  id: String!
  scale: Int!
  code: String!
}

type PaymentDestinationAccount {
  scale: Int!
  code: String!
  url: String
}

type OutgoingPaymentOutcome {
  amountSent: String!
}

input CreateOutgoingPaymentInput {
  accountId: String!
  paymentPointer: String
  amountToSend: String #UInt64
  invoiceUrl: String
  autoApprove: Boolean!
}

type OutgoingPaymentResponse {
  code: String!
  success: Boolean!
  message: String
  payment: OutgoingPayment
}

type WebhooksConnection {
  pageInfo: PageInfo!
  edges: [WebhookEdge!]!
}

type WebhookEdge {
  node: Webhook!
  cursor: String!
}

type Webhook {
  id: ID!
}

type CreateAccountMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  account: Account
}

type UpdateAccountMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  account: Account
}

type DeleteAccountMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

type CreateSubAccountMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  account: Account
}

type CreateWebhookMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  webhook: Webhook!
}

type UpdateWebhookMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  webhook: Webhook!
}

type DeleteWebhookMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

interface MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

scalar UInt64
