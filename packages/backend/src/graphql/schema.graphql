type Query {
  paymentPointer(id: String!): PaymentPointer

  asset(id: String!): Asset

  "Fetch a page of assets."
  assets(
    "Paginating forwards: the cursor before the the requested page."
    after: String
    "Paginating backwards: the cursor after the the requested page."
    before: String
    "Paginating forwards: The first **n** elements from the page."
    first: Int
    "Paginating backwards: The last **n** elements from the page."
    last: Int
  ): AssetsConnection!

  peer(id: String!): Peer

  "Fetch a page of peers."
  peers(
    "Paginating forwards: the cursor before the the requested page."
    after: String
    "Paginating backwards: the cursor after the the requested page."
    before: String
    "Paginating forwards: The first **n** elements from the page."
    first: Int
    "Paginating backwards: The last **n** elements from the page."
    last: Int
  ): PeersConnection!

  quote(id: String!): Quote
  outgoingPayment(id: String!): OutgoingPayment
}

type Mutation {
  createPaymentPointer(
    input: CreatePaymentPointerInput!
  ): CreatePaymentPointerMutationResponse!

  triggerPaymentPointerEvents(
    limit: Int!
  ): TriggerPaymentPointerEventsMutationResponse!

  "Create asset"
  createAsset(input: CreateAssetInput!): AssetMutationResponse!

  "Update asset withdrawal threshold"
  updateAssetWithdrawalThreshold(
    input: UpdateAssetInput!
  ): AssetMutationResponse!

  "Create peer"
  createPeer(input: CreatePeerInput!): CreatePeerMutationResponse!

  "Update peer"
  updatePeer(input: UpdatePeerInput!): UpdatePeerMutationResponse!

  "Delete peer"
  deletePeer(id: String!): DeletePeerMutationResponse!

  "Add peer liquidity"
  addPeerLiquidity(input: AddPeerLiquidityInput!): LiquidityMutationResponse

  "Add asset liquidity"
  addAssetLiquidity(input: AddAssetLiquidityInput!): LiquidityMutationResponse

  "Create liquidity withdrawal from peer"
  createPeerLiquidityWithdrawal(
    input: CreatePeerLiquidityWithdrawalInput!
  ): LiquidityMutationResponse

  "Create liquidity withdrawal from asset"
  createAssetLiquidityWithdrawal(
    input: CreateAssetLiquidityWithdrawalInput!
  ): LiquidityMutationResponse

  "Create liquidity withdrawal from Open Payments payment pointer"
  createPaymentPointerWithdrawal(
    input: CreatePaymentPointerWithdrawalInput!
  ): PaymentPointerWithdrawalMutationResponse

  "Finalize liquidity withdrawal"
  finalizeLiquidityWithdrawal(
    "The id of the liquidity withdrawal to finalize."
    withdrawalId: String!
  ): LiquidityMutationResponse

  "Rollback liquidity withdrawal"
  rollbackLiquidityWithdrawal(
    "The id of the liquidity withdrawal to rollback."
    withdrawalId: String!
  ): LiquidityMutationResponse

  createQuote(input: CreateQuoteInput!): QuoteResponse!

  createOutgoingPayment(
    input: CreateOutgoingPaymentInput!
  ): OutgoingPaymentResponse!

  "Deposit webhook event liquidity"
  depositEventLiquidity(eventId: String!): LiquidityMutationResponse

  "Withdraw webhook event liquidity"
  withdrawEventLiquidity(eventId: String!): LiquidityMutationResponse

  "Create Client"
  createClient(input: CreateClientInput!): CreateClientMutationResponse

  "Add Key to Client"
  addKeyToClient(input: AddKeyToClientInput!): AddKeyToClientMutationResponse

  "Create API Key"
  createApiKey(input: CreateApiKeyInput!): CreateApiKeyMutationResponse

  "Delete all API Keys"
  deleteAllApiKeys(
    input: DeleteAllApiKeysInput!
  ): DeleteAllApiKeysMutationResponse

  "Redeem API Key"
  redeemApiKey(input: RedeemApiKeyInput!): RedeemApiKeyMutationResponse

  "Refresh Session"
  refreshSession(input: RefreshSessionInput!): RefreshSessionMutationResponse

  "Revoke Session"
  revokeSession(input: RevokeSessionInput!): RevokeSessionMutationResponse
}

type PageInfo {
  "Paginating forwards: the cursor to continue."
  endCursor: String
  "Paginating forwards: Are there more pages?"
  hasNextPage: Boolean!
  "Paginating backwards: Are there more pages?"
  hasPreviousPage: Boolean!
  "Paginating backwards: the cursor to continue."
  startCursor: String
}

type AssetsConnection {
  pageInfo: PageInfo!
  edges: [AssetEdge!]!
}

type AssetEdge {
  node: Asset!
  cursor: String!
}

input CreateAssetInput {
  code: String!
  scale: Int!
  withdrawalThreshold: UInt64
}

input UpdateAssetInput {
  id: String!
  withdrawalThreshold: UInt64
}

type PeersConnection {
  pageInfo: PageInfo!
  edges: [PeerEdge!]!
}

type PeerEdge {
  node: Peer!
  cursor: String!
}

input CreatePeerInput {
  maxPacketAmount: UInt64
  http: HttpInput!
  asset: AssetInput!
  staticIlpAddress: String!
}

input UpdatePeerInput {
  id: String!
  maxPacketAmount: UInt64
  http: HttpInput
  staticIlpAddress: String
}

input HttpInput {
  incoming: HttpIncomingInput
  outgoing: HttpOutgoingInput!
}

input HttpIncomingInput {
  authTokens: [String!]!
}

input HttpOutgoingInput {
  authToken: String!
  endpoint: String!
}

input AssetInput {
  code: String!
  scale: Int!
}

input AddPeerLiquidityInput {
  "The id of the peer to add liquidity."
  peerId: String!
  "Amount of liquidity to add."
  amount: UInt64!
  "The id of the transfer."
  id: String!
}

input AddAssetLiquidityInput {
  "The id of the asset to add liquidity."
  assetId: String!
  "Amount of liquidity to add."
  amount: UInt64!
  "The id of the transfer."
  id: String!
}

input CreatePeerLiquidityWithdrawalInput {
  "The id of the peer to create the withdrawal for."
  peerId: String!
  "Amount of withdrawal."
  amount: UInt64!
  "The id of the withdrawal."
  id: String!
}

input CreateAssetLiquidityWithdrawalInput {
  "The id of the asset to create the withdrawal for."
  assetId: String!
  "Amount of withdrawal."
  amount: UInt64!
  "The id of the withdrawal."
  id: String!
}

input CreatePaymentPointerWithdrawalInput {
  "The id of the Open Payments payment pointer to create the withdrawal for."
  paymentPointerId: String!
  "The id of the withdrawal."
  id: String!
}

input CreateClientInput {
  name: String!
  uri: String!
  image: String!
  email: String!
}

input AddKeyToClientInput {
  id: String!
  clientId: String!
  jwk: String!
}

input CreateApiKeyInput {
  "Payment pointer API key is created for."
  paymentPointerId: String!
}

input DeleteAllApiKeysInput {
  "Payment pointer API keys are deleted from."
  paymentPointerId: String!
}

input RedeemApiKeyInput {
  "API key"
  key: String!
  "Payment pointer API key was issued for."
  paymentPointerId: String!
}

input RefreshSessionInput {
  "Session key"
  key: String!
}

input RevokeSessionInput {
  "Session key"
  key: String!
}

type Asset implements Model {
  id: ID!
  code: String!
  scale: Int!
  withdrawalThreshold: UInt64
  createdAt: String!
}

enum LiquidityError {
  AlreadyCommitted
  AlreadyRolledBack
  AmountZero
  InsufficientBalance
  InvalidId
  TransferExists
  UnknownAsset
  UnknownIncomingPayment
  UnknownPayment
  UnknownPaymentPointer
  UnknownPeer
  UnknownTransfer
}

type Peer implements Model {
  id: ID!
  maxPacketAmount: UInt64
  http: Http!
  asset: Asset!
  staticIlpAddress: String!
  createdAt: String!
}

type Http {
  outgoing: HttpOutgoing!
}

type HttpOutgoing {
  authToken: String!
  endpoint: String!
}

type PaymentPointer implements Model {
  id: ID!
  asset: Asset!
  url: String!
  publicName: String
  incomingPayments(
    "Paginating forwards: the cursor before the the requested page."
    after: String
    "Paginating backwards: the cursor after the the requested page."
    before: String
    "Paginating forwards: The first **n** elements from the page."
    first: Int
    "Paginating backwards: The last **n** elements from the page."
    last: Int
  ): IncomingPaymentConnection
  quotes(
    "Paginating forwards: the cursor before the the requested page."
    after: String
    "Paginating backwards: the cursor after the the requested page."
    before: String
    "Paginating forwards: The first **n** elements from the page."
    first: Int
    "Paginating backwards: The last **n** elements from the page."
    last: Int
  ): QuoteConnection
  outgoingPayments(
    "Paginating forwards: the cursor before the the requested page."
    after: String
    "Paginating backwards: the cursor after the the requested page."
    before: String
    "Paginating forwards: The first **n** elements from the page."
    first: Int
    "Paginating backwards: The last **n** elements from the page."
    last: Int
  ): OutgoingPaymentConnection
  createdAt: String!
}

type IncomingPaymentConnection {
  pageInfo: PageInfo!
  edges: [IncomingPaymentEdge!]!
}

type IncomingPaymentEdge {
  node: IncomingPayment!
  cursor: String!
}

type IncomingPayment implements Model {
  id: ID!
  paymentPointerId: ID!
  state: IncomingPaymentState!
  expiresAt: String!
  incomingAmount: Amount
  receivedAmount: Amount!
  description: String
  externalRef: String
  createdAt: String!
}

enum IncomingPaymentState {
  "The payment has a state of PENDING when it is initially created."
  PENDING
  "As soon as payment has started (funds have cleared into the account) the state moves to PROCESSING"
  PROCESSING
  "The payment is either auto-completed once the received amount equals the expected `incomingAmount`, or it is completed manually via an API call."
  COMPLETED
  "If the payment expires before it is completed then the state will move to EXPIRED and no further payments will be accepted."
  EXPIRED
}

type Amount {
  value: UInt64!
  assetCode: String!
  assetScale: Int!
}

type OutgoingPaymentConnection {
  pageInfo: PageInfo!
  edges: [OutgoingPaymentEdge!]!
}

type OutgoingPaymentEdge {
  node: OutgoingPayment!
  cursor: String!
}

type OutgoingPayment implements Model {
  id: ID!
  paymentPointerId: ID!
  state: OutgoingPaymentState!
  error: String
  stateAttempts: Int!
  sendAmount: Amount!
  receiveAmount: Amount!
  receiver: String!
  description: String
  externalRef: String
  quote: Quote
  sentAmount: Amount!
  createdAt: String!
}

enum OutgoingPaymentState {
  "Will transition to SENDING once payment funds are reserved"
  FUNDING
  "Paying, will transition to COMPLETED on success"
  SENDING
  "Successful completion"
  COMPLETED
  "Payment failed"
  FAILED
}

type QuoteConnection {
  pageInfo: PageInfo!
  edges: [QuoteEdge!]!
}

type QuoteEdge {
  node: Quote!
  cursor: String!
}

type Quote {
  id: ID!
  paymentPointerId: ID!
  receiver: String!
  sendAmount: Amount!
  receiveAmount: Amount!
  maxPacketAmount: UInt64!
  minExchangeRate: Float!
  lowEstimatedExchangeRate: Float!
  highEstimatedExchangeRate: Float!
  createdAt: String!
  expiresAt: String!
}

input AmountInput {
  value: UInt64!
  assetCode: String!
  assetScale: Int!
}

input CreateQuoteInput {
  paymentPointerId: String!
  sendAmount: AmountInput
  receiveAmount: AmountInput
  receiver: String!
}

type QuoteResponse {
  code: String!
  success: Boolean!
  message: String
  quote: Quote
}

input CreateOutgoingPaymentInput {
  paymentPointerId: String!
  quoteId: String!
  description: String
  externalRef: String
}

type OutgoingPaymentResponse {
  code: String!
  success: Boolean!
  message: String
  payment: OutgoingPayment
}

input CreatePaymentPointerInput {
  asset: AssetInput!
  url: String!
  publicName: String
}

type Client implements Model {
  id: ID!
  name: String!
  uri: String!
  image: String!
  email: String!
  keys: [ClientKeys!]!
  createdAt: String!
}

type ClientKeys implements Model {
  id: ID!
  clientId: String!
  jwk: String!
  createdAt: String!
}

type ApiKey implements Model {
  id: ID!
  paymentPointerId: String!
  key: String!
  createdAt: String!
  updatedAt: String!
}

type Session {
  key: String!
  expiresAt: String!
}

type PaymentPointerWithdrawal {
  id: ID!
  amount: UInt64!
  paymentPointer: PaymentPointer!
}

interface Model {
  id: ID!
  createdAt: String!
}

type CreatePaymentPointerMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  paymentPointer: PaymentPointer
}

type TriggerPaymentPointerEventsMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  count: Int
}

type AssetMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  asset: Asset
}

type CreatePeerMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  peer: Peer
}

type UpdatePeerMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  peer: Peer
}

type DeletePeerMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

type TransferMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

type LiquidityMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  error: LiquidityError
}

type PaymentPointerWithdrawalMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  error: LiquidityError
  withdrawal: PaymentPointerWithdrawal
}

type CreateClientMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  client: Client
}

type AddKeyToClientMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  client: Client
}

type CreateApiKeyMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  apiKey: ApiKey
}

type DeleteAllApiKeysMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

type RedeemApiKeyMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  session: Session
}

type RefreshSessionMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  session: Session
}

type RevokeSessionMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

interface MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

scalar UInt64

directive @auth on OBJECT | FIELD_DEFINITION
directive @isAdmin on OBJECT | FIELD_DEFINITION
