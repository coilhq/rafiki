type Query {
  "Fetch a page of grants."
  grants(input: PaginationInput): GrantsConnection!
}

type Mutation {
  "Revoke Grant"
  revokeGrant(input: RevokeGrantInput!): RevokeGrantMutationResponse!
}

type PageInfo {
  "Paginating forwards: the cursor to continue."
  endCursor: String
  "Paginating forwards: Are there more pages?"
  hasNextPage: Boolean!
  "Paginating backwards: Are there more pages?"
  hasPreviousPage: Boolean!
  "Paginating backwards: the cursor to continue."
  startCursor: String
}

type GrantsConnection {
  pageInfo: PageInfo!
  edges: [GrantEdge!]!
}

type GrantEdge {
  node: Grant!
  cursor: String!
}

input PaginationInput {
  "Paginating forwards: the cursor before the the requested page."
  after: String
  "Paginating backwards: the cursor after the the requested page."
  before: String
  "Paginating forwards: The first **n** elements from the page."
  first: Int
  "Paginating backwards: The last **n** elements from the page."
  last: Int
}

input RevokeGrantInput {
  grantId: String!
}

interface Model {
  id: ID!
  createdAt: String!
}

type Grant implements Model {
  "Grant id"
  id: ID!
  "Payment pointer of the resource owner's account"
  identifier: String!
  "Payment pointer of the grantee's account"
  client: String!
  "Access details"
  access: [Access!]!
  "State of the grant"
  state: GrantState!
  "Date-time of creation"
  createdAt: String!
}

type Access implements Model {
  "Access id"
  id: ID!
  "Payment pointer of a sub-resource (incoming payment, outgoing payment, or quote)"
  identifier: String
  "Date-time of creation"
  createdAt: String!
}

type RevokeGrantMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

interface MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

enum GrantState {
  "grant request was created but grant was not approved yet"
  pending
  "grant was approved"
  granted
  "grant was revoked"
  revoked
  "grant was rejected"
  rejected
}
