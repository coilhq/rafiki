type Query {
  "Fetch a page of grants."
  grants(
    "Paginating forwards: the cursor before the the requested page."
    after: String
    "Paginating backwards: the cursor after the the requested page."
    before: String
    "Paginating forwards: The first **n** elements from the page."
    first: Int
    "Paginating backwards: The last **n** elements from the page."
    last: Int
    "Filter grants based on specific criteria."
    filter: GrantFilter
  ): GrantsConnection!

  "Fetch a grant"
  grant(id: ID!): Grant!
}

type Mutation {
  "Revoke Grant"
  revokeGrant(input: RevokeGrantInput!): RevokeGrantMutationResponse!
}

type PageInfo {
  "Paginating forwards: the cursor to continue."
  endCursor: String
  "Paginating forwards: Are there more pages?"
  hasNextPage: Boolean!
  "Paginating backwards: Are there more pages?"
  hasPreviousPage: Boolean!
  "Paginating backwards: the cursor to continue."
  startCursor: String
}

type GrantsConnection {
  pageInfo: PageInfo!
  edges: [GrantEdge!]!
}

type GrantEdge {
  node: Grant!
  cursor: String!
}

input GrantFilter {
  identifier: FilterString
}

input FilterString {
  in: [String!]!
}

input RevokeGrantInput {
  grantId: String!
}

interface Model {
  id: ID!
  createdAt: String!
}

type Grant implements Model {
  "Grant id"
  id: ID!
  "Payment pointer of the grantee's account"
  client: String!
  "Access details"
  access: [Access!]!
  "State of the grant"
  state: GrantState!
  "Date-time of creation"
  createdAt: String!
}

type Access implements Model {
  "Access id"
  id: ID!
  "Payment pointer of a sub-resource (incoming payment, outgoing payment, or quote)"
  identifier: String
  "Access type (incoming payment, outgoing payment, or quote)"
  type: String!
  "Access action (create, read, list or complete)"
  actions: [String]!
  "Payment limits"
  limits: LimitData
  "Date-time of creation"
  createdAt: String!
}

type LimitData {
  "Payment pointer URL of the receiver"
  receiver: String
  "Amount to send"
  sendAmount: PaymentAmount
  "Amount to receive"
  receiveAmount: PaymentAmount
  "Interval between payments"
  interval: String
}

type PaymentAmount {
  value: UInt64!
  "[ISO 4217 currency code](https://en.wikipedia.org/wiki/ISO_4217), e.g. `USD`"
  assetCode: String!
  "Difference in orders of magnitude between the standard unit of an asset and a corresponding fractional unit"
  assetScale: UInt8!
}

type RevokeGrantMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

interface MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

enum GrantState {
  "grant request was created but grant was not approved yet"
  PENDING
  "grant was approved"
  GRANTED
  "grant was revoked"
  REVOKED
  "grant was rejected"
  REJECTED
}

scalar UInt8
scalar UInt64
